Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pyomo.environ as pyo
from pyomo.gdp import Disjunct, Disjunction

model = pyo.ConcreteModel()

model.RECTANGLES = pyo.Set(ordered=True, initialize=[0,1,2,3])

# Width and Lenght of each rectangle
model.Width = pyo.Param(model.RECTANGLES, initialize={0:6, 1:3, 2:4, 3:2})
model.Length = pyo.Param(model.RECTANGLES, initialize={0:6, 1:8, 2:5, 3:3})

model.StripWidth = pyo.Param(initialize=10, doc="Width of the strip" )

# upperbound on length (default is sum of lengths of rectangles)
model.LengthUB = pyo.Param(initialize=sum(model.Length[i] for i in
                                          model.RECTANGLES))

# x (length) and y (width) coordinates of each of the rectangles
model.x = pyo.Var(model.RECTANGLES, bounds=(0, model.LengthUB),
                  doc="rectangle corner x-position (position down length)")
def y_bounds(m, i):
    return (0, m.StripWidth-m.Width[i])
model.y = pyo.Var(model.RECTANGLES,
              bounds=y_bounds,
              doc="rectangle corner y-position (position across width)")

# length of strip (this will be the objective)
model.MaxLength = pyo.Var(within=pyo.NonNegativeReals)

# generate the list of possible rectangle conflicts (which are any pair)
def rec_pairs_filter(model, i, j):
    return i < j
model.OVERLAP_PAIRS = pyo.Set(initialize=model.RECTANGLES * model.RECTANGLES,
    dimen=2, filter=rec_pairs_filter)

# strip length constraint
@model.Constraint(model.RECTANGLES)
def strip_ends_after_last_rec(model, i):
    return model.MaxLength >= model.x[i] + model.Length[i]

# minimize length
model.total_length = pyo.Objective(expr=model.MaxLength)

#
# Insert the no-overlap disjunctions here!
#
@model.Disjunction(model.OVERLAP_PAIRS)
def noOverlap(m,i,j):
    return [
        m.x[i] + m.Length[i] <= m.x[j],
        m.x[j] + m.Length[j] <= m.x[i],
        m.y[i] + m.Width[i] <= m.y[j],
        m.y[j] + m.Width[j] <= m.y[i],
    ]
#
# Transform the model using the BigM relaxation
#
pyo.TransformationFactory('gdp.bigm').apply_to(model)

#
# Solve and print the solution
#
pyo.SolverFactory('glpk').solve(model, tee=True)
model.pprint()
for i in model.RECTANGLES:
    print("Rectangle %s: (%s, %s)" % (i, pyo.value(model.x[i]), pyo.value(model.y[i])))
model.total_length.display()

------------------

----- stdout -----
WARNING: Could not locate the 'glpsol' executable, which is required for
solver 'glpk'
------------------

[31m---------------------------------------------------------------------------[39m
[31mApplicationError[39m                          Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 63[39m
[32m     58[39m pyo.TransformationFactory([33m'[39m[33mgdp.bigm[39m[33m'[39m).apply_to(model)
[32m     60[39m [38;5;66;03m#[39;00m
[32m     61[39m [38;5;66;03m# Solve and print the solution[39;00m
[32m     62[39m [38;5;66;03m#[39;00m
[32m---> [39m[32m63[39m [43mpyo[49m[43m.[49m[43mSolverFactory[49m[43m([49m[33;43m'[39;49m[33;43mglpk[39;49m[33;43m'[39;49m[43m)[49m[43m.[49m[43msolve[49m[43m([49m[43mmodel[49m[43m,[49m[43m [49m[43mtee[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[32m     64[39m model.pprint()
[32m     65[39m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m model.RECTANGLES:

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pyomo/opt/base/solvers.py:534[39m, in [36mOptSolver.solve[39m[34m(self, *args, **kwds)[39m
[32m    531[39m [38;5;28;01mdef[39;00m [34msolve[39m([38;5;28mself[39m, *args, **kwds):
[32m    532[39m [38;5;250m    [39m[33;03m"""Solve the problem"""[39;00m
[32m--> [39m[32m534[39m     [38;5;28;43mself[39;49m[43m.[49m[43mavailable[49m[43m([49m[43mexception_flag[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[32m    535[39m     [38;5;66;03m#[39;00m
[32m    536[39m     [38;5;66;03m# If the inputs are models, then validate that they have been[39;00m
[32m    537[39m     [38;5;66;03m# constructed! Collect suffix names to try and import from solution.[39;00m
[32m    538[39m     [38;5;66;03m#[39;00m
[32m    539[39m     [38;5;28;01mfrom[39;00m [34;01mpyomo[39;00m[34;01m.[39;00m[34;01mcore[39;00m[34;01m.[39;00m[34;01mbase[39;00m[34;01m.[39;00m[34;01mblock[39;00m [38;5;28;01mimport[39;00m BlockData

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pyomo/opt/solver/shellcmd.py:140[39m, in [36mSystemCallSolver.available[39m[34m(self, exception_flag)[39m
[32m    138[39m     [38;5;28;01mif[39;00m exception_flag:
[32m    139[39m         msg = [33m"[39m[33mNo executable found for solver [39m[33m'[39m[38;5;132;01m%s[39;00m[33m'[39m[33m"[39m
[32m--> [39m[32m140[39m         [38;5;28;01mraise[39;00m ApplicationError(msg % [38;5;28mself[39m.name)
[32m    141[39m     [38;5;28;01mreturn[39;00m [38;5;28;01mFalse[39;00m
[32m    142[39m [38;5;28;01mreturn[39;00m [38;5;28;01mTrue[39;00m

[31mApplicationError[39m: No executable found for solver 'glpk'

