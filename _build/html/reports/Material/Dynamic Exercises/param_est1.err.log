Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pyomo.environ as pyo
from pyomo.dae import ContinuousSet, DerivativeVar

measurements = {1:0.264, 2:0.594, 3:0.801, 5:0.959}

model = pyo.ConcreteModel()
model.t = ContinuousSet(initialize=measurements.keys(),bounds=(0, 6))	

model.x1 = pyo.Var(model.t)
model.x2 = pyo.Var(model.t)

model.p1 = pyo.Var(bounds=(-1.5,1.5))
model.p2 = pyo.Var(bounds=(-1.5,1.5))

model.x1dot = DerivativeVar(model.x1,wrt=model.t)
model.x2dot = DerivativeVar(model.x2)

def _init_conditions(model):
	yield model.x1[0] == model.p1
	yield model.x2[0] == model.p2
model.init_conditions = pyo.ConstraintList(rule=_init_conditions)

# Alternate way to declare initial conditions
#def _initx1(model):
#	return model.x1[0] == model.p1		
#model.initx1 = pyo.Constraint(rule=_initx1)

#def _initx2(model):
#	return model.x2[0] == model.p2
#model.initx2 = pyo.Constraint(rule=_initx2)

def _x1dot(model,i):
	return model.x1dot[i] == model.x2[i]
model.x1dotcon = pyo.Constraint(model.t, rule=_x1dot)

def _x2dot(model,i):
	return model.x2dot[i] == 1-2*model.x2[i]-model.x1[i]
model.x2dotcon = pyo.Constraint(model.t, rule=_x2dot)

def _obj(model):
	return sum((model.x1[i]-measurements[i])**2 for i in measurements.keys())
model.obj = pyo.Objective(rule=_obj)

# Discretize model using Orthogonal Collocation
discretizer = pyo.TransformationFactory('dae.collocation')
discretizer.apply_to(model,nfe=8,ncp=5)

solver = pyo.SolverFactory('ipopt')

results = solver.solve(model,tee=True)

t_meas = sorted(list(measurements.keys()))
x1_meas = [pyo.value(measurements[i]) for i in sorted(measurements.keys())]

t = list(model.t)
x1 = [pyo.value(model.x1[i]) for i in model.t]
    
import matplotlib.pyplot as plt

plt.plot(t,x1)
plt.plot(t_meas,x1_meas,'o')
plt.xlabel('t')
plt.ylabel('x')
plt.title('Dynamic Parameter Estimation Using Collocation')
plt.show()

------------------

----- stdout -----
WARNING: Could not locate the 'ipopt' executable, which is required for solver
ipopt
------------------

[31m---------------------------------------------------------------------------[39m
[31mApplicationError[39m                          Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 50[39m
[32m     46[39m discretizer.apply_to(model,nfe=[32m8[39m,ncp=[32m5[39m)
[32m     48[39m solver = pyo.SolverFactory([33m'[39m[33mipopt[39m[33m'[39m)
[32m---> [39m[32m50[39m results = [43msolver[49m[43m.[49m[43msolve[49m[43m([49m[43mmodel[49m[43m,[49m[43mtee[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[32m     52[39m t_meas = [38;5;28msorted[39m([38;5;28mlist[39m(measurements.keys()))
[32m     53[39m x1_meas = [pyo.value(measurements[i]) [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28msorted[39m(measurements.keys())]

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pyomo/opt/base/solvers.py:534[39m, in [36mOptSolver.solve[39m[34m(self, *args, **kwds)[39m
[32m    531[39m [38;5;28;01mdef[39;00m [34msolve[39m([38;5;28mself[39m, *args, **kwds):
[32m    532[39m [38;5;250m    [39m[33;03m"""Solve the problem"""[39;00m
[32m--> [39m[32m534[39m     [38;5;28;43mself[39;49m[43m.[49m[43mavailable[49m[43m([49m[43mexception_flag[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[32m    535[39m     [38;5;66;03m#[39;00m
[32m    536[39m     [38;5;66;03m# If the inputs are models, then validate that they have been[39;00m
[32m    537[39m     [38;5;66;03m# constructed! Collect suffix names to try and import from solution.[39;00m
[32m    538[39m     [38;5;66;03m#[39;00m
[32m    539[39m     [38;5;28;01mfrom[39;00m [34;01mpyomo[39;00m[34;01m.[39;00m[34;01mcore[39;00m[34;01m.[39;00m[34;01mbase[39;00m[34;01m.[39;00m[34;01mblock[39;00m [38;5;28;01mimport[39;00m BlockData

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pyomo/opt/solver/shellcmd.py:140[39m, in [36mSystemCallSolver.available[39m[34m(self, exception_flag)[39m
[32m    138[39m     [38;5;28;01mif[39;00m exception_flag:
[32m    139[39m         msg = [33m"[39m[33mNo executable found for solver [39m[33m'[39m[38;5;132;01m%s[39;00m[33m'[39m[33m"[39m
[32m--> [39m[32m140[39m         [38;5;28;01mraise[39;00m ApplicationError(msg % [38;5;28mself[39m.name)
[32m    141[39m     [38;5;28;01mreturn[39;00m [38;5;28;01mFalse[39;00m
[32m    142[39m [38;5;28;01mreturn[39;00m [38;5;28;01mTrue[39;00m

[31mApplicationError[39m: No executable found for solver 'ipopt'

